# -*- coding: utf-8 -*-
"""Untitled15.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1g7UB_V_4JwqafHnmLa59iecni8ZQIy5G
"""

#Computer Vision - display camera output, read image and video formats
import cv2

#system 
import os

#to open the trained image dataset
from keras.models import load_model

#to perform mathematical operations on arrays
import numpy as np



# to perform time related operations
import time

from google.colab.patches import cv2_imshow

def haarcascade():
  # loading haarcascade file for face detection
  !wget https://github.com/TarunG1122/Driver-Drowsiness-detection-using-CNN-and-open-cv-with-warning-alarm/raw/87734b3ac37753dbc02eae61c6fc29236ce9c901/haar%20cascade%20files/haarcascade_frontalface_alt.xml
  !wget https://github.com/TarunG1122/Driver-Drowsiness-detection-using-CNN-and-open-cv-with-warning-alarm/raw/87734b3ac37753dbc02eae61c6fc29236ce9c901/haar%20cascade%20files/haarcascade_lefteye_2splits.xml
  !wget https://github.com/TarunG1122/Driver-Drowsiness-detection-using-CNN-and-open-cv-with-warning-alarm/raw/87734b3ac37753dbc02eae61c6fc29236ce9c901/haar%20cascade%20files/haarcascade_righteye_2splits.xml
  face = cv2.CascadeClassifier('/content/haarcascade_frontalface_alt.xml')
  # loading haarcascade file for left eye detection
  leye = cv2.CascadeClassifier("/content/haarcascade_lefteye_2splits.xml")
  # loading haarcascade file for right eye detection
  reye = cv2.CascadeClassifier("/content/haarcascade_righteye_2splits.xml")

haarcascade()

# based on our pre - trained model cnnCat2.h5 we have 2 types of eyes (closed eye and open eye)
lbl=['Close','Open']

def loadmodel():
  
  # loading pre trained model cnnCat2.h5 for detection
  model = load_model("/content/cnnCat2.h5")
  path = os.getcwd()

  #to access the camera 

  #to select the type of font that needs to be present on the live detection window
  font = cv2.FONT_HERSHEY_COMPLEX_SMALL

  #to count seconds 
  count=0

  #to add or sub the count value to deteremine if the driver has closed his eyelids for longer than 16  
  score=0

  #the add warning light in the live detection window
  thicc=2

  #accuracy of right and left eye
  rpred=[99]
  lpred=[99]

!wget https://github.com/TarunG1122/Driver-Drowsiness-detection-using-CNN-and-open-cv-with-warning-alarm/blob/676f70dc5ecffffa90aa841d3e9363e932ddfaa3/oc.mp4

def livedetection():
  cnt = 0
  cap = cv2.VideoCapture("/content/oc.mp4")
  while True :
      #will read each frame and we store the image in a frame variable.
      ret, frame = cap.read()  
      height,width = frame.shape[:2] 

      #OpenCV algorithm for object detection takes gray images in the input.
      gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)
      #Face detection
      faces = face.detectMultiScale(gray,minNeighbors=5,scaleFactor=1.1,minSize=(25,25)) #Face detection
      #Left eye detection
      left_eye = leye.detectMultiScale(gray) 
      #Right eye detection
      right_eye =  reye.detectMultiScale(gray) 

      cv2.rectangle(frame, (0,height-50) , (200,height) , (0,0,0) , thickness=cv2.FILLED )

      for (x,y,w,h) in faces:
        #Draws rectangle for detected face.
          cv2.rectangle(frame, (x,y) , (x+w,y+h) , (100,100,100) , 1 )

      for (x,y,w,h) in right_eye:
          r_eye=frame[y:y+h,x:x+w]
          count=count+1
          r_eye = cv2.cvtColor(r_eye,cv2.COLOR_BGR2GRAY)
          # My model is trained on 24*24 images
          r_eye = cv2.resize(r_eye,(24,24))
          #Normalization so the model can works efficiently
          r_eye= r_eye/255                  
          r_eye=  r_eye.reshape(24,24,-1)
          r_eye = np.expand_dims(r_eye,axis=0)
          rpred = (model.predict(r_eye) > 0.5).astype("int32")
          if(rpred[0][1]==1):
              lbl='Open' 
          if(rpred[0][1]==0):
              lbl='Closed'
          break

      for (x,y,w,h) in left_eye:
          l_eye=frame[y:y+h,x:x+w]
          count=count+1
          l_eye = cv2.cvtColor(l_eye,cv2.COLOR_BGR2GRAY)  
          l_eye = cv2.resize(l_eye,(24,24))
          l_eye= l_eye/255
          l_eye=l_eye.reshape(24,24,-1)
          l_eye = np.expand_dims(l_eye,axis=0)
          lpred = (model.predict(l_eye) > 0.5).astype("int32")
          if(lpred[0][1] ==1):
              lbl='Open'   
          if(lpred[0][1]==0):
              lbl='Closed'
          break

      if(rpred[0][1]==0 and lpred[0][1]==0):
          score=score+1
          cv2.putText(frame,"Closed",(10,height-20), font, 1,(255,255,255),1,cv2.LINE_AA)
      else:
          score=score-1
          cv2.putText(frame,"Open",(10,height-20), font, 1,(255,255,255),1,cv2.LINE_AA)
      
          
      if(score<0):
          score=0   
      cv2.putText(frame,'Score:'+str(score),(100,height-20), font, 1,(255,255,255),1,cv2.LINE_AA)
      if(score>15):
          cv2.imwrite(os.path.join(path,'image.jpg'),frame)
          
          if(thicc<16):
              thicc= thicc+2
          else:
              thicc=thicc-2
              if(thicc<2):
                  thicc=2
          cv2.rectangle(frame,(0,0),(width,height),(0,0,255),thicc) 
      cv2_imshow(frame)
      if cv2.waitKey(1) & 0xFF == ord('q'):
          break
  cap.release()
  cv2.destroyAllWindows()